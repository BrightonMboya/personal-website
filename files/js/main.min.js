var workData;

$(document).ready(function() {
	resetAll();
	$(window).on("load", function() {
		loadPage();
	});
});

async function loadPage() {

	workData = await loadWorkData();
	await animatePageIn();
	navHandler();
	workListScroller();
	easeScroll();
	workClickListener();
	workCanvas();
}






function resetAll() {
	$('.fixed-scroll').css("position", "fixed");
	$("#content-container .parallax-wrapper.home-back").css("transform", "translateY(50%)");
	$("#content-container .title-wrapper *, .nav-wrapper").css("transform", "translateY(200%)");
	$("#content-container .parallax-wrapper.home-back img").css("transform", "translateY(-40%)");
	$("#content-container .h-animate").css("transform", "translateY(-200%)");
	$("#content-container .parallax-wrapper.home-back, #content-container .h-animate, #content-container .title-wrapper *, .nav-wrapper").css("opacity", "0");
	$("#content-container .load .loader").css("opacity", "0");
	$("#content-container .load .loader").css("transform", "translateY(50px)");
	anime({
		targets: "#content-container .load .loader",
		opacity:1,
		translateY: "0",
		easing: "cubicBezier(0.23, 1, 0.32, 1)",
		duration: 1000,
		delay: 1000
	});
}

// TODO: Replace timeout with proper loading listener
function animatePageIn() {
	return new Promise((resolve, error) => {
		setTimeout(function() {
			anime({
				targets: "#content-container .load .loader",
				opacity:0,
				translateY: "-50px",
				duration: 1000,
				delay: 1000,
				easing: "cubicBezier(0.755, 0.05, 0.855, 0.06)",
				complete: function() {
					$("#content-container .load").remove();
					
					anime({
						targets: "#content-container .title-wrapper *, .nav-wrapper",
						translateY: "0%",
						opacity: 1,
						easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
						duration: 1500,
						delay: anime.stagger(200)
					})
					anime({
						targets: "#content-container .parallax-wrapper.home-back, #content-container .parallax-wrapper.home-back img",
						translateY: "0%",
						opacity:1,
						easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
						duration: 1500,
						delay: 300
					});
					setTimeout(function() {
						anime({
							targets: "#content-container .h-animate",
							translateY: "0%",
							opacity:1,
							easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
							duration: 1200,
							delay: anime.stagger(300),
							complete: function() {
								resolve();
							}
						});
					}, 300);
				}
			});
		}, 5000);
	});
}


function navHandler() {
	var locations = [
		{ 
			name: 'home',
			location: 0
		},
		{
			name: 'work',
			location: $("#content-container.work-click-area").offset().top
		},
		{	name: 'about',
			location: 2000
		}
	];

	$(window).resize(() => {
		locations[1].location = $("#content-container.work-click-area").offset().top;
	});

	$('.nav-wrapper #nav-container li.scroller').click((e) => {
		let dataName = $(e.target).data("name");
		let locationObj = locations.find(e => e['name'] === dataName);

		window.scroll({
			top: locationObj.location,
			behavior: 'smooth'
		});
	});
}



function loadWorkData() {
	return new Promise((resolve, error) => {
		fetch("files/js/data.json")
			.then((data) => data.json())
			.then((data) => {
				let workContainer = "#content-container .work-list ul";

				for (i=0; i<data.length; i++) {
					$(workContainer).append(
						`<li class="list-item w-animate" data-id="${data[i].id}">
							<img draggable="false" src="files/imgs/work-back/${data[i].id}.jpg" alt="${data[i].title} Background Image">
							<p class="item-date w-animate">${data[i].date}</p>
							<div class="text-wrapper">
								<p class="item-summary w-animate">${data[i].summary}</p>
								<h1 class="item-title w-animate">${data[i].title}</h1>
							</div>
						</li>`);
				}
				resolve(data);
		});
	});
}

// TODO: Make scroller only work if current navigation area is work
function workListScroller() {

	let isClick, endPosition, initialMousePosX, initialPos;
	let slider = $('#content-container .work-list');
	let maxSpeed = 5000;

	slider.css("transform", "translateX(0px)");
	calculateEndPos();

	$("#work-canvas").bind('mousedown', (e) => {
		initialMousePosX = e.clientX;
		isClick = true;
		setTimeout(() => {
			if (isClick) {
				slider.addClass("hold");
				initialPos = slider.css("transform").match(/-?[\d\.]+/g);
				initialPos = parseInt(initialPos[4]);
			}
		}, 100)
	});

	$("#work-canvas").bind('mouseleave', () => {
		isClick = false;
		slider.removeClass("hold");
	});

	$("#work-canvas").bind('mouseup', () => {
		isClick = false;
		slider.removeClass("hold");
	});

	$("#work-canvas").bind('mousemove', (e) => {
		if (!isClick) return;
		e.preventDefault();
		
		secondPosX = e.clientX;
		diff = secondPosX - initialMousePosX;
		calcPosition = initialPos - (maxSpeed * (diff / document.body.clientWidth));
		
		if (calcPosition > 0) calcPosition = 0;
		if (calcPosition <= (endPosition * -1)) calcPosition = endPosition*-1;
		
		slider.css("transform", `translateX(${calcPosition}px)`);
	});



	$(window).resize(() => {
		calculateEndPos();
	});

	function calculateEndPos() {
		let perView, perEntireView;
		let listItems = slider.children("ul").children("li");
		let sliderWidth = 0;

		$("#content-container .work-list ul li").each(function() {
			sliderWidth += $(this).outerWidth();
			perView = Math.floor(slider.outerWidth()/$(this).outerWidth());
		});

		perEntireView = sliderWidth / listItems.length;
		endPosition = perEntireView * (listItems.length - perView);
	}
}


function workCanvas() {

	let defaultRadius = 35;
	let radius = defaultRadius;
	let canvas = $('#work-canvas');;
	let context = canvas[0].getContext('2d');
	let isClick = false;
	let circleFill = "#3a4257";

	let x = 0;
	let y = 0;

	function listeners() {
		canvas.mousemove(mouseMove);
		canvas.mousedown(mouseDown);
		canvas.mouseup(mouseUp);
		canvas.mouseleave(mouseUp);
		canvas.click((e) => {
			let isHover = isItemHover(".list-item", e)
			if (isHover && !isClick) {
				openWorkItem(isHover);
			}
		});
	};

	function mouseMove(e) {
		var t = 0;
		var text = "DRAG";
		var position = getMousePosition(e);
		var checkHoverEl = isItemHover(".list-item", e);
		
		if (!isClick) {
			if (checkHoverEl && !isClick) {
				text = "CLICK";
				$("#work-canvas").css("cursor", "pointer");
				$(checkHoverEl).addClass("hover");
			} else {
				text = "DRAG";
				$("#work-canvas").css("cursor", "default");
			}

			$(".list-item").each(function() {
				if (this != checkHoverEl) {
					$(this).removeClass("hover");
				}
			});
		}

		function loop() {
			if (!isClick) {

				context.clearRect(0, 0, canvas.width(), canvas.height());

				x += easeInOutQuad(t) * (position.x - x);
				y += easeInOutQuad(t) * (position.y - y);
				
				context.beginPath();
				context.arc(x, y, radius, 0, 2*Math.PI, false);
				context.fillStyle = circleFill;
				context.fill();
				context.fillStyle = 'white';
				context.font = '14px Questrial';
				context.textAlign = 'center';
				context.textBaseline = 'middle';
    			context.fillText(text, x, y);
				
				if (t < 1) {
					t += 0.015;
					requestAnimationFrame(loop);
				}
			}
		}
		loop();
	};

	function isItemHover(elem, e) {
		let isHover, hoverElem;
		
		$(elem).each(function (i) {
			let elemTop = $(this).offset().top;
			let elemBottom = elemTop + $(this).outerHeight();
			let elemLeft = $(this).offset().left;
			let elemRight = elemLeft + $(this).outerWidth();

			if (!isHover) {
				isHover = (((e.pageY <= elemBottom) && (e.pageY >= elemTop)) && ((e.pageX >= elemLeft) && (e.pageX <= elemRight)));
				hoverElem = this;
			}
		});

		if (isHover) return hoverElem;
		return false;
	}
	
	function mouseDown() {
		isClick = true;
		var t = 0;

		function loop() {
			context.clearRect(0, 0, canvas.width(), canvas.height());

			drawArrow(x+(50 * easeInOutQuad(t)), y, false);
			drawArrow(x-(50 * easeInOutQuad(t)), y, true);

			context.beginPath();
			context.arc(x, y, (radius - (10 * easeInOutQuad(t))), 0, 2*Math.PI, false);
			context.fillStyle = circleFill;
			context.fill();

			if (t < 1) {
				t += 0.04;
				requestAnimationFrame(loop);
			}
		} loop();
	}

	function mouseUp(e) {
		
		var t = 0.72;
		isClick = false;
		mouseMove(e);

		function loop() {
			context.clearRect(0, 0, canvas.width(), canvas.height());
			context.beginPath();
			context.arc(x, y, (radius * easeInOutQuad(t)), 0, 2*Math.PI, false);
			context.fillStyle = circleFill;
			context.fill();

			if (t < 1) {
				t += 0.015;
				requestAnimationFrame(loop);
			}
		} loop();
	}

	function getMousePosition(e) {
		return {
			x: e.offsetX,
			y: e.offsetY
		}
	}

	function easeInOutQuad(t) {
		return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
	}


	function drawArrow(x, y, inv){
		context.moveTo(x, y);
		
		if (inv) {
			context.lineTo(x + 8, y + 7);
			context.moveTo(x, y);
			context.lineTo(x + 8, y - 7);
		} else {
			context.lineTo(x - 8, y + 7);
			context.moveTo(x, y);
			context.lineTo(x - 8, y - 7);
		}

		context.strokeStyle = circleFill;
		context.lineWidth = 2;
		context.stroke();
	}
	
	$(window).resize(() => {
		document.querySelector("#work-canvas").width = $("#content-container.work-click-area").outerWidth();
		document.querySelector("#work-canvas").height = $("#content-container.work-click-area").outerHeight();
	});
	document.querySelector("#work-canvas").width = $("#content-container.work-click-area").outerWidth();
	document.querySelector("#work-canvas").height = $("#content-container.work-click-area").outerHeight();
	
	listeners();
}





























// TODO: Cleanup and simplify reduntant code




// DATA FETCHING AND DISPLAYING

function openWorkItem(e) {
	openItem(parseInt($(e).data('id'))-1)
};

function openItem(id) {
	$("#listing-container .item-date,#listing-container .item-title p,#listing-container .role-container ul, #listing-container .links").html("")
	$("#listing-container .close-container").css("display", "block")
	$("#listing-container").addClass("moving")
	$("#listing-container .item-date").text(workData[id].date)
	$("#listing-container .item-title p").text(workData[id].title)
	for (i=0; i<workData[id].roles.length; i++) {
		$("#listing-container .role-container ul").append(`<li class="role">${workData[id].roles[i]}</li>`)
	}
	for (i=0; i<workData[id].links.length; i++) {
		$("#listing-container .links").append(`<a class="link-btn ${workData[id].links[i].type}" href="${workData[id].links[i].link}" target="_blank"><span>${workData[id].links[i].text}</span></li>`)
	}

	anime({
		targets: ".fixed-scroll",
		marginLeft: "10%",
		easing: "cubicBezier(0.86, 0, 0.07, 1)",
		duration: 800
	});
	anime({
		targets: "#listing-container .content-wrapper",
		paddingLeft: "7vw",
		easing: "cubicBezier(0.23, 1, 0.32, 1)",
		duration: 1050
	});
	anime({
		targets: "#listing-container",
		width: "100vw",
		easing: "cubicBezier(0.86, 0, 0.07, 1)",
		duration: 700,
		complete: function() {
			$("#listing-container").removeClass("moving")
		}
	});
}

function workClickListener() {
	$("#listing-container .close-container").css("display", "none")

	$(".close-container").click(function(e) {
		closeItem()
	});

	$(".list-item").click(function(e) {
	});

	function closeItem() {
		$("#listing-container").addClass("moving")
		anime({
			targets: ".fixed-scroll",
			marginLeft: "0",
			easing: "cubicBezier(0.86, 0, 0.07, 1)",
			duration: 800
		});
		anime({
			targets: "#listing-container .content-wrapper",
			paddingLeft: "0",
			easing: "cubicBezier(0.86, 0, 0.07, 1)",
			duration: 800,
			complete: function() {
				$("#listing-container .close-container").css("display", "none")
			}
		});
		anime({
			targets: "#listing-container",
			width: "0vw",
			easing: "cubicBezier(0.86, 0, 0.07, 1)",
			duration: 700
		});
	}
}









// EASE SCROLLING AND ANIMATIONS ON SCROLLING

function easeScroll() {
	animateOnScroll();

	m.transitions.mntm_scroll(".fixed-scroll", [
		{element: ".parallax-wrapper, .list-item", offsetY: 6},
		{element: ".fixed-scroll", offsetY: -1},
		{element: ".back-parallax-wrapper", offsetY: 4},
		{element: ".parallax-wrapper.about", offsetY: 4}
	], 1000, "cubic-bezier(0.19, 1, 0.22, 1)");
}

function animateOnScroll() {

	var animated = [];

	$(".list-item, .list-item .w-animate, .a-animate").css("opacity", "0");
	$(".list-item, .list-item .w-animate, .a-animate").css("transform", "translateY(50%)");

	function inView(elem) {
	  var docViewTop = $(window).scrollTop();
	  var docViewBottom = docViewTop + $(window).height();

	  var elemTop = $(elem).offset().top;
	  var elemBottom = elemTop + ($(elem).height()/2);

	  return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
	}

	function animate(el, i) {
		if (!animated.includes(el)) {
			animated.push(el);
			anime({
				targets: el,
				opacity:1,
				translateY: "0",
				easing: "cubicBezier(0.165, 0.84, 0.44, 1)",
				duration: 1000,
				complete: function() {
					$(el).addClass("scroll-done");
				},
				delay: anime.stagger(200, {start: i*400})
			});
		}
	}

	$(window).scroll(function() {
		if (inView("#content-container.work-click-area")) {
			setTimeout(() => {
				$('.list-item').each(function (index) {
					animate(".list-item", index);
					setTimeout(() => {
						animate(".list-item:nth-child("+(index+1)+") .w-animate", index);
					}, 200)
				});
			}, 1000);
		}
		 
		if (inView("#content-container.about")) {
			animate("#content-container.about .a-animate", 0);
		}

		/* $("body").css("background-color", "#07111f");
		} else {
			$("body").css("background-color", "#F4F6F8");
		}*/
	});
}
